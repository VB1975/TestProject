<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="MnuMain.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="TspStandard.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>132, 17</value>
  </metadata>
  <metadata name="SspStatus.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>238, 17</value>
  </metadata>
  <data name="RtfDocument.Text" xml:space="preserve">
    <value>Hi there. My name is Richard Rost. I am the President/CEO of Computer Learning Zone, a small technology education company based in Cape Coral, Florida dedicated to helping people get the most from their computers. My specialty is teaching how to build databases using Microsoft Access.

A self-taught computer nerd, I started programming at the age of 8 on TRS-80 that they had in my school. Of course, I just had to have one, so I begged my grandpa to buy me a Tandy Color Computer 2 for Xmas. From that point on, I was hooked. I learned BASIC programming (and computers in general) mostly from books and magazines. Remember, there was no public Internet back then. I wish I had the resources available now!

I was a CoCo fanatic until I got my hands on my first IBM-PC compatible machine in the late 1980s. I taught myself how to program in C just so I could modify the computer bulletin board (BBS) system that I was running. Mine had a fantasy role-playing theme (D&amp;D, etc.) and was based on the WWIV platform. Before the Internet, this was how nerds communicated. You'd fire up your 2400 baud modem and hope for a dial tone. 

After I "graduated" high school, I did go to college for a couple of years. I dropped out because, honestly, I was bored. This was the early 90s and they were teaching stuff that I knew when I was 12 years old. Plus, I was working for a company doing phone-based tech support, and I hated that job too. So, I decided to start my own company.

I founded Amicron Computing in 1994 to provide custom-built computer systems and related services to the Western New York area. In addition to building computers myself, I also offered my customers networking solutions, custom software development, and personalized training solutions to meet their individual business needs. My personal specialty is building database solutions using Microsoft Access.

I opened my first dedicated Computer Training Center in 1996 in Amherst, NY. Centered around small group instruction, I taught classes in Microsoft Windows, Word, Excel, PowerPoint, Web Design, QuickBooks, Photoshop, WordPerfect, and more. What really set my training center apart, however, was the availability of advanced developer-level instruction in Microsoft Access, Excel, and Visual Basic. I developed all of my own training materials from my years of computer experience.

As the computer industry changed following Y2K, so did my business. As computers themselves became more "commercialized," and big companies - as they always do - put the squeeze on the smaller ones, I decided to stop providing hardware and PC service and focused more on training and consulting. It was during this time that I opened a new, larger training facility in Amherst NY. In addition to the small group training I had offered previously, I started holding large seminars and workshops for groups of 20 to 30 students.

Taking the seminars yet one step further, I began offering my training sessions live, online over the Internet in the fall of 2002. They were immediately successful, and I was no longer limited geographically to the people I could reach. Thousands of students from around the world signed up for my online seminars.

After teaching live seminars for over a year, I developed highly-refined video tutorials under the very popular 599CD name. My goal was to offer tutorials at a price low enough so everyone could afford them. After much debate and research, I decided on a price of $5.99 for my beginner, one-hour lessons. Since the lessons were initially only available on CD-ROM, the name 599CD just made sense, plus it was a nice, short, available .com domain name. Today, I have many different levels of courses available (beginner through advanced) in several different topics.

As of May of 2022, my YouTube channel has over 200,000 subscribers and over 36.5 million views.

While I no longer offer personal and group training sessions, individualized consulting, or software development services, I do still try my best to help people. I currently have a very popular online TechHelp video series where you can ask me your questions. If I already have a video that answers your question, I'll point you in the right direction. If not, and it's something that I feel will help many people, I'll make a custom video out of it. I enjoy assisting people from around the globe with their computer questions.

In 2010, I authored The Complete Idiot's Guide to Microsoft Excel 2010 published by Alpha Books (a division of Penguin Books). This is my first professionally "published" book.

In October of 2013, I moved to Cape Coral, Florida. I just couldn't take any more Buffalo winters and lack of sunlight. Give me palm trees and sunshine, please. Buffalo is great in the summer... both weeks of it. If I never see snow the rest of my life, I'll die a happy man. 

In 2014, 2015 and again in 2023, I was selected for the Microsoft MVP Award (Most Valuable Professional). It's such an honor to be part of this elite group of experts. There are only about 3000 people in the world with this designation, and only 17 of us specifically for Microsoft Access.

In 2019, I moved to nearby Fort Myers, Florida, and rebranded my company Computer Learning Zone. Too many people kept asking me what 599cd meant.

It's 2023. Back to Cape Coral. What can I say? I couldn't stay away. LOL. Also, I received the Microsoft MVP Award for a 3rd time this year. Awesome.

You can read more about the history of 599cd, Amicron, and Computer Learning Zone here.

RR
LLAP</value>
  </data>
  <metadata name="OfdOpenDocument.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>342, 17</value>
  </metadata>
  <metadata name="SfdSaveDocument.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>483, 17</value>
  </metadata>
</root>